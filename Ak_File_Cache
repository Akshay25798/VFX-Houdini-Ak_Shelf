import hou
import os
import shutil
from mpc.houdini.houdiniAssets.storage.houdiniSceneFile import saveAndIncrementFileName
from mpc.houdini.houdiniAssets.storage import houdiniSceneFile

job = os.getenv("JOB")
shot = os.getenv("SHOT")
user = os.getenv("USER")
color = hou.Color((0.9,0.8,0.6))
title = "Ak File Cache"
cacheOvrMsg = "You are trying to write in other users folder.\nYou can not override other users cache.\nPlease change the user name in file cache path."
submitMsg = "Job has sent to the farm successfully.\nCheck terminal/Tractor Dashboard for job ID."


def SetPath(node):
    node.parm("file").set('/jobs/%s/%s/houdini/hip/%s/geo/$OS/v`chs("v")`/$OS`ifs(ch("trange"),".$F4","")`.bgeo.sc'%(job, shot, user))
    node.setUserData('nodeshape', 'tabbed_right')
    node.setColor(color)
    
def PlusVersion(kwargs):
    node = hou.pwd()
    v = node.evalParm("v")
    node.parm("v").set(v+1)
    
def MinusVersion(kwargs):
    node = hou.pwd()
    v = node.evalParm("v")
    node.parm("v").set(v-1)
    
def AddTag(kwargs):
    msg = "Add a comment for curent veriosn.\nlike: first pass sim, add any attrubute value, ready for punlish etc."
    tag = hou.ui.readInput(msg)
    node = hou.pwd()
    file = node.evalParm("file")
    v = node.evalParm("v")
    path = os.path.dirname(file)
    f = open(path+"/Tag_Version.pub", "w")
    f.write(tag[1])
    f.close()
    node.parm("v").set(v+1000)
    node.parm("v").set(v)
    node.parm("reload").pressButton() #reload cache

def RemoveTag(kwargs):
    node = hou.pwd()
    file = node.evalParm("file")
    v = node.evalParm("v")
    path = os.path.dirname(file)
    os.remove(path+"/Tag_Version.pub")
    node.parm("v").set(v+1000)
    node.parm("v").set(v)
    node.parm("reload").pressButton() #reload cache


def saveToDisk(kwargs):
    node = hou.pwd()
    user = os.getenv("USER")
    file = node.evalParm("file")
    if user in file:
        parent = node.parent()
        node_path = node.path()+"/render"
        path = os.path.dirname(file)
        if not os.path.exists(path):
            os.makedirs(path)
        upStreamNodes = node.inputAncestors()
        upStreamPath = path+"/"+node.name()+".ak"
        parent.saveItemsToFile(upStreamNodes,upStreamPath) #save upStream
        
        shutil.copy(hou.hipFile.path(),path+"/"+node.name()+".hip")
        houdiniSceneFile.save() #save before cache
        hou.node(node_path).parm("execute").pressButton() #start cache
        node.parm("reload").pressButton() #reload cache
    else:
        hou.ui.displayMessage(cacheOvrMsg)

    
def saveToDiskBg(kwargs):
    user = os.getenv("USER")
    node = hou.pwd()
    parent = node.parent()
    node_path = node.path()+"/render"
    file = node.evalParm("file")
    path = os.path.dirname(file)
    if user in file:
        if not os.path.exists(path):
            os.makedirs(path)
        upStreamNodes = node.inputAncestors()
        upStreamPath = path+"/"+node.name()+".ak"
        parent.saveItemsToFile(upStreamNodes,upStreamPath) #save upStream
        
        shutil.copy(hou.hipFile.path(),path+"/"+node.name()+".hip")
        houdiniSceneFile.save() #save before cache
        hou.node(node_path).parm("executebackground").pressButton() #start cache
        node.parm("reload").pressButton() #reload cache
    else:
        hou.ui.displayMessage(cacheOvrMsg)


def submitToFarm(kwargs):
    node = hou.pwd()
    user = os.getenv("USER")
    file = node.evalParm("file")
    if user in file:
        saveAndIncrementFileName() #take ++
        parent = node.parent()
        node_path = node.path()+"/ROP/Submit_To_Farm"
        path = os.path.dirname(file)
        if not os.path.exists(path):
            os.makedirs(path)
        upStreamNodes = node.inputAncestors()
        upStreamPath = path+"/"+node.name()+".ak"
        parent.saveItemsToFile(upStreamNodes,upStreamPath) #save upStream
        
        shutil.copy(hou.hipFile.path(),path+"/"+node.name()+".hip")
        houdiniSceneFile.save() #save before cache
        hou.node(node_path).parm("submit").pressButton() #send cache to farm
        node.parm("reload").pressButton() #reload cache
        hou.ui.displayMessage(submitMsg)
    else:
        hou.ui.displayMessage(cacheOvrMsg)
        
        
def BuildUpStream(kwargs):
    hou.clearAllSelected()
    node = hou.pwd()
    parent = node.parent()
    file = node.evalParm("file")
    path = os.path.dirname(file)
    readUpstream = path+"/"+node.name()+".ak"
    upStreamNodes = parent.loadItemsFromFile(readUpstream) #load upStream nodes
    
def LoadInFile(kwargs):
    node = hou.pwd()
    if node.evalParm("trange")==0:
        try:
            read_path = node.evalParm("file")
            node_name = node.name()
            version = node.evalParm("v")
    
            geo = hou.node("..")
            _file = geo.createNode("file",node_name+"_v"+str(version))
            _file.parm("file").set(read_path)
    
            pos = node.position()
            x = pos[0]+3
            y = pos[1]
            newPos = hou.Vector2(x, y)
            _file.setPosition(newPos)
        
        except:
                hou.ui.displayMessage("Please select Cache node.")
    
    else:
        try:
            read_path = node.evalParm("file")
            node_name = node.name()
            version = node.evalParm("v")
            read = os.path.dirname(read_path)
            geo = hou.node("..")
            _file = geo.createNode("file",node_name+"_v"+str(version))
            _file.parm("file").set(read+"/"+node_name+".$F4.bgeo.sc")
    
            pos = node.position()
            x = pos[0]+3
            y = pos[1]
            newPos = hou.Vector2(x, y)
            _file.setPosition(newPos)
    
        except:
                hou.ui.displayMessage("Please select Cache node.")

def OpenSourceFile(kwargs):
    node = hou.pwd()
    node_name = node.name()
    read = node.evalParm("file")
    read = os.path.dirname(read)
    sourceFile = read+"/"+node_name+".hip"
    if os.path.isfile(sourceFile):
        os.system("houdinifx "+sourceFile +"&")
    else:
        hou.ui.displayMessage("Source file not found for this version",title=title)
    
        
def CleanVersions(kwargs):
    node = hou.pwd()
    node_name = node.name()
    read = node.evalParm("file")
    read = os.path.dirname(read)
    dir = os.path.dirname(read)
    #print(dir)
    totalSize = os.popen("du -h %s | tail -1| awk '{print $1}' "%(dir)).read()
    picked = hou.ui.selectFromTree(os.listdir(dir), message="Select to delete version folder.\nTotal cache size : %s"%(totalSize), title=title) #UI
    for f in picked:
        shutil.rmtree(dir+"/"+f) #cleaning the selected version
        
def OpenFolder(kwargs):
    node = hou.pwd()
    read = node.evalParm("file")
    read = os.path.dirname(read)
    cmd = "caja "+read+" &"
    os.system(cmd)
